@@resource KeyEventTranslations
(* Modifiers can be "Shift", "Control", "Command", "Option" 
	For Macintosh: "Command" = Command Key, "Option" = Option Key
	For X11: "Command" = Mod1, "Option" = Mod2
	For Windows: "Command" = Alt, "Option" = Alt
*)

(* Have made changes around lines 12, 44, and 94, and in several other places *)

(* Here is how to call code in a file. Assuming test.m is in the appropriate
directory and has NotebookWrite[SelectedNotebook[], "bob"] in it (for example)
and nothing else, adding this item will make Ctrl + Left print bob in the notebook: 
	Item[
		KeyEvent["Left", Modifiers -> {Control}], 
		KernelExecute @ Get["/home/tanner/.Mathematica/SystemFiles/FrontEnd/TextResources/X/test.m"],
		MenuEvaluator -> Automatic
	], 
*)

(* IMPORTANT NOTE: KeyEvent and MenuKey (MenuSetup.tr's KeyEvent 
equivalent) both can do seemingly arbitrary keys, like j J or /. Thus
Vim mode is possible(!). It seems like the only difference between 
KeyEventTranslations and MenuSetup in terms of use is that MenuSetup 
also adds the thing to the menu while the former is invisible (but 
still there). Oh and MenuSetup has precedence. *)

(* Strange note: MMA can't seem to detect Shift + Tab or Control + 
Shift + Tab for some reason. Guess I can't use them for my keybindings 
then. *)

(* NotebookEventActions would be incredibly useful for cross 
platforming this code if not for this problem: if you have a setting 
for Ctrl + j in here, it gets triggered, not j. This means bindings 
for Ctrl + j using NotebookEventActions don't work, because they are 
really just bindings for j that check if Ctrl is pressed. So they 
work but would require modification of the KeyEventTranslations.tr 
file, at which point why bother with NotebookEventActions. *)

(* I've also put this in my init.m file: 
SetOptions[SelectedNotebook[], 
 NotebookEventActions -> {{"KeyDown", "\t"} :> 
    KeyBindings`OnTab[]}]; 
*)

EventTranslations[{

	(* Here are my own bindings *)
	
	Item[
		KeyEvent["Left", Modifiers -> {Control}], 
		KernelExecute @ KeyBindings`MoveLeftWord[],
		MenuEvaluator -> Automatic
	],

	(*
	Item[
		KeyEvent["Left", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`OnControlShiftLeft[],
		MenuEvaluator -> Automatic
	], 
	*)
	
	Item[
		KeyEvent["Left", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`SelectLeftPrevious[],
		MenuEvaluator -> Automatic
	],
	
	Item[
		KeyEvent["Right", Modifiers -> {Control}], 
		KernelExecute @ KeyBindings`MoveRightWord[],
		MenuEvaluator -> Automatic
	],

	(*
	Item[
		KeyEvent["Right", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`OnControlShiftRight[],
		MenuEvaluator -> Automatic
	],
	*)
	
	Item[
		KeyEvent["Right", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`SelectRightNext[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["r", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`DeleteCellDown[],
		MenuEvaluator -> Automatic
	],
		
	Item[
		KeyEvent["r", Modifiers -> {Control}], 
		KernelExecute @ KeyBindings`DeleteCell[],
		MenuEvaluator -> Automatic
	], 	
	
	Item[
		KeyEvent["[", Modifiers -> {}], 
		KernelExecute @ KeyBindings`OnOpenBracket[],
		MenuEvaluator -> Automatic
	], 
	
	Item[
		KeyEvent["{", Modifiers -> {}], 
		KernelExecute @ KeyBindings`OnOpenBrace[],
		MenuEvaluator -> Automatic
	], 
	
	Item[
		KeyEvent["(", Modifiers -> {}], 
		KernelExecute @ KeyBindings`OnOpenParenthese[],
		MenuEvaluator -> Automatic
	], 
		
	Item[
		KeyEvent["\"", Modifiers -> {}], 
		KernelExecute @ KeyBindings`OnQuotation[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["<", Modifiers -> {}], 
		KernelExecute @ KeyBindings`OnLessThan[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Backspace", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`Desurround[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["[", Modifiers -> {Command}], 
		KernelExecute @ NotebookWrite[InputNotebook[], "\[LeftDoubleBracket]"],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["]", Modifiers -> {Command}], 
		KernelExecute @ NotebookWrite[InputNotebook[], "\[RightDoubleBracket]"],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["<", Modifiers -> {Command}], 
		KernelExecute @ NotebookWrite[InputNotebook[], "\[LeftAssociation]"],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent[">", Modifiers -> {Command}], 
		KernelExecute @ NotebookWrite[InputNotebook[], "\[RightAssociation]"],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Up", Modifiers -> {Control}], 
		KernelExecute @ KeyBindings`OnControlUp[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Down", Modifiers -> {Control}], 
		KernelExecute @ KeyBindings`OnControlDown[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Up", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`SelectUpCell[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Down", Modifiers -> {Control, Shift}], 
		KernelExecute @ KeyBindings`SelectDownCell[],
		MenuEvaluator -> Automatic
	],

	Item[
		KeyEvent["Return", Modifiers -> {Shift}], 
		KernelExecute @ KeyBindings`OnShiftReturn[],
		MenuEvaluator -> Automatic
	],

	(* Commented out because they clash with my bindings *)
	(*
	Item[KeyEvent[".", Modifiers -> {Command}], "Tab"],
	Item[KeyEvent[",", Modifiers -> {Command}], "MovePreviousPlaceHolder"],
	Item[KeyEvent[".", Modifiers -> {Control, Command}], "MoveNextExpression"],
	Item[KeyEvent[",", Modifiers -> {Control, Command}], "MovePreviousExpression"],
	*)

(* Evaluation *)
	Item[KeyEvent["Enter"], "EvaluateCells"],
	Item[KeyEvent["KeypadEnter"], "EvaluateCells"], 
	
	(* Commented out because it clashes with my bindings *)
	(* Item[KeyEvent["Return", Modifiers -> {Shift}], "HandleShiftReturn"], *)
	
	Item[KeyEvent["KeypadEnter", Modifiers -> {Shift}], "EvaluateNextCell"], 	
	Item[KeyEvent["Enter", Modifiers -> {Shift}], "EvaluateNextCell"], 
	Item[KeyEvent["Return", Modifiers -> {Shift, Control}], Evaluate[All]],
	Item[KeyEvent["Return", Modifiers -> {Option}], "SimilarCellBelow"], 
	Item[KeyEvent[",", Modifiers->{Command}], FrontEnd`EvaluatorInterrupt[Automatic]], 
	Item[KeyEvent["Escape"], "ShortNameDelimiter"], 

(* Cursor control *)
	Item[KeyEvent["Up"], "MovePreviousLine"], 
	Item[KeyEvent["Down"], "MoveNextLine"], 
	Item[KeyEvent["Left"], "MovePrevious"], 
	Item[KeyEvent["Right"], "MoveNext"], 

	(* Commenting these out because they clash with my modifications *)
	(*
	Item[KeyEvent["Right", Modifiers -> {Control}], "MoveNextWord"], 
	Item[KeyEvent["Left", Modifiers -> {Control}], "MovePreviousWord"], 
	*)
	
	Item[KeyEvent["End"], "MoveLineEnd"], 
	Item[KeyEvent["Home"], "MoveLineBeginning"], 

(* Selection *)
	Item[KeyEvent["Right", Modifiers -> {Shift}], "SelectNext"], 
	Item[KeyEvent["Left", Modifiers -> {Shift}], "SelectPrevious"], 
	
	(* Commenting these out because they interfere with my modifications *)
	(*
	Item[KeyEvent["Right", Modifiers -> {Control, Shift}], "SelectNextWord"], 
	Item[KeyEvent["Left", Modifiers -> {Control, Shift}], "SelectPreviousWord"], 
	*)
	
	Item[KeyEvent["Down", Modifiers -> {Shift}], "SelectNextLine"], 
	Item[KeyEvent["Up", Modifiers -> {Shift}], "SelectPreviousLine"], 
	Item[KeyEvent["Home", Modifiers -> {Shift}], "SelectLineBeginning"], 
	Item[KeyEvent["End", Modifiers -> {Shift}], "SelectLineEnd"], 

	(* Ok I think I modified this line as well *)
	Item[KeyEvent[".", Modifiers -> {Control}], "NewRow"], 
	
	Item[KeyEvent["KeypadDecimal", Modifiers -> {Control}], "ExpandSelection"], 

(* Notebook window control *)
	(* Commenting these two out because they clash with my bindings *)
	(*
	Item[KeyEvent["Up", Modifiers -> {Control}], "ScrollLineUp"], 
	Item[KeyEvent["Down", Modifiers -> {Control}], "ScrollLineDown"], 
	*)
	
	Item[KeyEvent["PageUp"], "ScrollPageUp"],
	Item[KeyEvent["PageDown"], "ScrollPageDown"],
	Item[KeyEvent["Prior"], "ScrollPageUp"],
	Item[KeyEvent["Next"], "ScrollPageDown"],
	Item[KeyEvent["Home", Modifiers -> {Control}],
		FrontEndExecute[{
			FrontEnd`SelectionMove[FrontEnd`InputNotebook[], Before, Notebook],
			FrontEnd`FrontEndToken[FrontEnd`InputNotebook[], "ScrollNotebookStart"]
		}]],
	Item[KeyEvent["End", Modifiers -> {Control}],
		FrontEndExecute[{
			FrontEnd`SelectionMove[FrontEnd`InputNotebook[], After, Notebook],
			FrontEnd`FrontEndToken[FrontEnd`InputNotebook[], "ScrollNotebookEnd"]
		}]],
	Item[KeyEvent["Left", Modifiers->{Command}], "HyperlinkGoBack"],
	Item[KeyEvent["Right", Modifiers->{Command}], "HyperlinkGoForward"],

(* Input *)
	Item[KeyEvent["Return"], "Linebreak"], 
	Item[KeyEvent["Tab"], "Tab"], 
	Item[KeyEvent["Backspace"], "DeletePrevious"], 
	Item[KeyEvent["Delete"], "DeleteNext"], 
	Item[KeyEvent["Backspace", Modifiers->{Control}], "DeletePreviousWord"],
	Item[KeyEvent["Delete", Modifiers->{Control}], "DeleteNextWord"],

(* Typesetting input *)
	Item[KeyEvent["6", Modifiers -> {Control}], "Superscript"], 
	Item[KeyEvent["Keypad6", Modifiers -> {Control}], "Superscript"], 
	Item[KeyEvent["^", Modifiers -> {Control}], "Superscript"], 
	Item[KeyEvent["-", Modifiers -> {Control}], "Subscript"], 
	Item[KeyEvent["KeypadSubtract", Modifiers -> {Control}], "Subscript"], 
	Item[KeyEvent["_", Modifiers ->{Control}],  "Subscript"],
	Item[KeyEvent["/", Modifiers -> {Control}], "Fraction"], 
	Item[KeyEvent["KeypadDivide", Modifiers -> {Control}], "Fraction"],
	Item[KeyEvent["2", Modifiers -> {Control}], "Radical"], 
	Item[KeyEvent["Keypad2", Modifiers -> {Control}], "Radical"], 
	Item[KeyEvent["@", Modifiers -> {Control}], "Radical"], 
	Item[KeyEvent["7", Modifiers -> {Control}], "Above"], 
	Item[KeyEvent["&", Modifiers -> {Control}], "Above"], 
	Item[KeyEvent["Keypad7", Modifiers -> {Control}], "Above"], 
	Item[KeyEvent["$", Modifiers -> {Control}], "Below"],
	Item[KeyEvent["4", Modifiers -> {Control}], "Below"],
	Item[KeyEvent["Keypad4", Modifiers -> {Control}], "Below"], 
	Item[KeyEvent[",", Modifiers -> {Control}], "NewColumn"], 

	(* It looks like I may have modified the below Item as well *)
	Item[KeyEvent["Return", Modifiers -> {Control}], "ExpandSelection"], 
	
	(*Here I have commented these out in case they interfere with some of my built in key bindings *)
	(*
	Item[KeyEvent["9", Modifiers -> {Control}], "CreateInlineCell"], 
	Item[KeyEvent["(", Modifiers -> {Control}], "CreateInlineCell"], 
	Item[KeyEvent["Keypad9", Modifiers -> {Control}], "CreateInlineCell"], 
	Item[KeyEvent[")", Modifiers -> {Control}], "MoveNextCell"], 
	Item[KeyEvent["0", Modifiers -> {Control}], "MoveNextCell"], 
	Item[KeyEvent["Keypad0", Modifiers -> {Control}], "MoveNextCell"], 
	*)
	
	Item[KeyEvent["5", Modifiers -> {Control}, CellClass -> BoxFormData], "Otherscript"], 
	Item[KeyEvent["Keypad5", Modifiers -> {Control}, CellClass -> BoxFormData], "Otherscript"], 
	Item[KeyEvent["%", Modifiers -> {Control}, CellClass -> BoxFormData], "Otherscript"], 
	Item[KeyEvent["Left", Modifiers->{Command}, CellClass -> BoxFormData], "NudgeLeft"],
	Item[KeyEvent["Right", Modifiers->{Command}, CellClass -> BoxFormData], "NudgeRight"],
	Item[KeyEvent["PageUp", Modifiers-> {Control}, CellClass -> BoxFormData], "PreviousFunctionTemplate"],
	Item[KeyEvent["PageDown", Modifiers-> {Control}, CellClass -> BoxFormData], "NextFunctionTemplate"],

(* These are used for 2-d expression (Ctrl + Shift + 6 or Ctrl + /) navigation *) 
(* Typesetting motion commands *)
	Item[KeyEvent[" ", Modifiers -> {Control}], "MoveExpressionEnd"], 

	(* I am commenting out the three below keybindings so they don'the interfere with my own *)
	(* Item[KeyEvent["Tab", Modifiers -> {Shift}], "MovePreviousPlaceHolder"], *)
	Item[KeyEvent["Tab", Modifiers -> {Control}, CellClass -> BoxFormData], "MoveNextExpression"], 
	Item[KeyEvent["Tab", Modifiers -> {Control, Shift}, CellClass -> BoxFormData], "MovePreviousExpression"], 
	
(* Drawing tool commands *)
	Item[KeyEvent["o", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["Select"]]],
	(* Reassigned to Rectangle in v8; I doubt anyone knows "r" does anything.  Double-click is easier. *)
	(* Item[KeyEvent["r", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["Reshape"]]],*)
	Item[KeyEvent["p", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawPoint"]]],
	Item[KeyEvent["c", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawCircle"]]],
	Item[KeyEvent["d", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawDisk"]]],
	Item[KeyEvent["f", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawFreehand"]]],
	Item[KeyEvent["a", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawArrow"]]],
	Item[KeyEvent["l", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawLine"]]],
	Item[KeyEvent["b", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawBox"]]],
	(* "q" for Rectangle deprecated in v8 but preserved for "backward compatibilty" for one version *)
	Item[KeyEvent["q", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawRectangle"]]],
	Item[KeyEvent["r", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawRectangle"]]],
	Item[KeyEvent["s", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawPolyline"]]],
	Item[KeyEvent["g", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["DrawPolygon"]]],
	Item[KeyEvent["t", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["PlaceText"]]],
	Item[KeyEvent["m", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["PlaceMath"]]],
	Item[KeyEvent["i", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["SampleColor"]]],
	Item[KeyEvent[".", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["GetCoordinates"]]],
	Item[KeyEvent["e", CellClass->BoxFormData, BoxClass->GraphEdit2D], FrontEndExecute[Select2DTool["SampleStyle"]]],
	Item[KeyEvent["o", CellClass->BoxFormData, BoxClass->GraphEdit3D], FrontEndExecute[Select3DTool["Select"]]],
	Item[KeyEvent["i", CellClass->BoxFormData, BoxClass->GraphEdit3D], FrontEndExecute[Select3DTool["SampleColor"]]],
	Item[KeyEvent["v", CellClass->BoxFormData, BoxClass->GraphEdit3D], FrontEndExecute[Select3DTool["AdjustView"]]],
	Item[KeyEvent["m", CellClass->BoxFormData, BoxClass->GraphEdit3D], FrontEndExecute[Select3DTool["AdjustLights"]]],

(* Grouping commands *)
	Item[KeyEvent["g", Modifiers -> {Control, Shift}], "CellGroup"],
	Item[KeyEvent["u", Modifiers -> {Control, Shift}], "CellUngroup"],
	Item[KeyEvent["g", Modifiers -> {Control, Shift}, CellClass->BoxFormData, BoxClass->GraphEdit2D], "Group"],
	Item[KeyEvent["u", Modifiers -> {Control, Shift}, CellClass->BoxFormData, BoxClass->GraphEdit2D], "Ungroup"],

(* Miscellaneous menu commands *)
	Item[KeyEvent["Cut"], "Cut"], 
	Item[KeyEvent["Copy"], "Copy"], 
	Item[KeyEvent["Paste"], Paste[After]], 
	Item[KeyEvent["Undo"], "Undo"], 
	Item[KeyEvent["Redo"], "Redo"],
	Item[KeyEvent["z", Modifiers -> {Control, Shift}], "Redo"],
	Item[KeyEvent["Help"], "SelectionHelpDialog"], 
	Item[KeyEvent["Insert", Modifiers -> {Shift}], Paste[After]],
	Item[KeyEvent["Insert", Modifiers -> {Control}], "Copy"],
	Item[KeyEvent["Delete", Modifiers -> {Shift}], "Cut"],
	Item[KeyEvent["F1", Modifiers->{Shift}], SelectionHelpDialog[False]],
	Item[KeyEvent["F2"], FrontEnd`CompleteSelection[True]]

}]
